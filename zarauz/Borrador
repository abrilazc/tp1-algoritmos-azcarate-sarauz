//Borrador

//Dibujo de polilineas

dibujar_polilineas(char *nombre,size_t escalado,float posicion[2]){

    figura_t *dibujo=cargar(nombre);//llamarlo por nombre o por figura?

    size_t cant_poli=figura->cantidad_polilineas;

    for(size_t i=0,i<cant_poli,i++){
        polilinea_t *poli_dibu=figura->polilineas[i];

        size_t cant_punt=polilinea_cantidad_puntos(poli_dibu);

        float matriz[2][cant_punt];//revisar que esto sea legal

        for(size_t j=0,j<cant_punt,j++){
            
            //if(lodeabajo==0) return NULL;
            polilinea_obtener_punto(poli,j,matriz[0][i],matriz[1][i]);// asi es la firma -> float *x, float *y
        }
        //existe polilinea_setear_color(polilinea_t *polilinea, color_t color)
        //pero no le encuentro mucho sentido...

        uint8_t r, g, b;
        color_a_rgb(poli_dibu->color, &r, &g, &b); //en funciones.h habr√≠a que hacer #include "color.h"
        SDL_SetRenderDrawColor(renderer, 0xFF, r, g, b);
        //arreglar matriz[][] de las cosas de abajo
        SDL_RenderDrawLine(render,matriz[][]+posicion[0],matriz[][]+posicion[1],matriz[][]+posicion[0],matriz[][]+posicion[1]);
    }
}

//esta es la estructura propuesta del main
SDL_SetRenderDrawColor(renderer, 0xFF, 0x00, 0x00, 0x00);
            for(int i = 0; i < chorro_tam - 1; i++)
                SDL_RenderDrawLine(
                    renderer,
                    chorro[i][0] * f + VENTANA_ANCHO / 2,
                    -chorro[i][1] * f + VENTANA_ALTO / 2,
                    chorro[i+1][0] * f + VENTANA_ANCHO / 2,
                    -chorro[i+1][1] * f + VENTANA_ALTO / 2
                );
        }


struct memoria_niveles;
typedef struct memoria_niveles mem_niv_t;

mem_niv_t crear_memoria_nivel(figura_t **memoria){

}

struct memoria_niveles{
    nivel_t **niveles;
    size_t cantidad;
}


struct nivel;
typedef struc nivel nivel_t;

typedef struct{
bool infinito;
polilinea_t **polilinea;
tanque_t *tanque;
torreta_t *torreta;
reactor_t *reactor;
}nivel_t

nivel_t crear_nivel()

struct tanque;
typedef struct_tanque tanque_t;
struct torreta;
typedef struct_torreta torreta_t;
struct reactor;
typedef struct_reactor reactor_t;

typedef struct{
bool infinito;
polilinea_t **polilinea;
float *posicion[2] //se pueden poner los 3 en parametros disttintos, o los 3 en el mismo
float *angulo;
size_t cantidad;
}tanque_t

typedef struct{
bool infinito;
polilinea_t **polilinea;
float *posicion[2] //se pueden poner los 3 en parametros disttintos, o los 3 en el mismo
float *angulo;
size_t cantidad;
}torreta_t

typedef struct{
bool infinito;
polilinea_t **polilinea;
float *posicion[2] //se pueden poner los 3 en parametros disttintos, o los 3 en el mismo
float *angulo;
size_t cantidad;
}reactor_t

tanque_t crear_tanques(nivel_t nivel){
    pedir cantidad
    pedir memoria
    setear
    setarposicion
}




nivel(nivel_t,nave_t)

matriz tanque x,y,tita
matriz torreta x,y,tita
matriz reactor x,y,tita

cargar nave
cargar superficie
cargar generico(posicion, angulo, cantidad)
generico=tanques, torretas o reactor

tda tanque
posicion
angulo
polilinea
cantidad