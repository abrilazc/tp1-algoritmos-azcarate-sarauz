
const size_t cantidad_filas(char caracter){
    static const size_t tam_caracter[]={
	['a']=sizeof(caracter_a)/(2*sizeof(float)),
	['b']=sizeof(caracter_b)/(2*sizeof(float)),
	['c']=sizeof(caracter_c)/(2*sizeof(float)),
	['d']=sizeof(caracter_d)/(2*sizeof(float)),
	['e']=sizeof(caracter_e)/(2*sizeof(float)),
	['f']=sizeof(caracter_f)/(2*sizeof(float)),
	['g']=sizeof(caracter_g)/(2*sizeof(float)),
	['h']=sizeof(caracter_h)/(2*sizeof(float)),
	['i']=sizeof(caracter_i)/(2*sizeof(float)),
	['j']=sizeof(caracter_j)/(2*sizeof(float)),
	['k']=sizeof(caracter_k)/(2*sizeof(float)),
	['l']=sizeof(caracter_l)/(2*sizeof(float)),
	['m']=sizeof(caracter_m)/(2*sizeof(float)),
	['n']=sizeof(caracter_n)/(2*sizeof(float)),
	['o']=sizeof(caracter_o)/(2*sizeof(float)),
	['p']=sizeof(caracter_p)/(2*sizeof(float)),
	['q']=sizeof(caracter_q)/(2*sizeof(float)),
	['r']=sizeof(caracter_r)/(2*sizeof(float)),
	['s']=sizeof(caracter_s)/(2*sizeof(float)),
	['t']=sizeof(caracter_t)/(2*sizeof(float)),
	['u']=sizeof(caracter_u)/(2*sizeof(float)),
	['v']=sizeof(caracter_v)/(2*sizeof(float)),
	['w']=sizeof(caracter_w)/(2*sizeof(float)),
	['x']=sizeof(caracter_x)/(2*sizeof(float)),
	['y']=sizeof(caracter_y)/(2*sizeof(float)),
	['z']=sizeof(caracter_z)/(2*sizeof(float)),
	['1']=sizeof(caracter_1)/(2*sizeof(float)),
	['2']=sizeof(caracter_2)/(2*sizeof(float)),
	['3']=sizeof(caracter_3)/(2*sizeof(float)),
	['4']=sizeof(caracter_4)/(2*sizeof(float)),
	['5']=sizeof(caracter_5)/(2*sizeof(float)),
	['6']=sizeof(caracter_6)/(2*sizeof(float)),
	['7']=sizeof(caracter_7)/(2*sizeof(float)),
	['8']=sizeof(caracter_8)/(2*sizeof(float)),
	['9']=sizeof(caracter_9)/(2*sizeof(float)),
	['0']=sizeof(caracter_0)/(2*sizeof(float)),
	['x']=sizeof(caracter_x)/(2*sizeof(float)),
	['y']=sizeof(caracter_y)/(2*sizeof(float)),
	['z']=sizeof(caracter_z)/(2*sizeof(float)),
	[' ']=sizeof(caracter_espacio)/(2*sizeof(float))
    };
    return tam_caracter[caracter];
}
void dibujar_letra(SDL_Renderer *renderer,char caracter, float posicion[2], color_t color){
    size_t cant_punt=cantidad_filas(caracter);
    float matriz[largo_caracter][2];
    letra_matriz(matriz);
    float escala=1;

    SDL_SetRenderDrawColor(renderer, r, g, b, 0x00);   
    for(size_t j=0;j<cant_punt-1;j++){
        SDL_RenderDrawLine(
            renderer,   
            (matriz[j][0]*escala+posicion[0]),
            -(matriz[j][1]*escala+posicion[1]) + VENTANA_ALTO,
            (matriz[j+1][0]*escala+posicion[0]) ,
            -(matriz[j+1][1]*escala+posicion[1]) + VENTANA_ALTO
            );
    }
}
void palabra_a_polilinea(SDL_Renderer *renderer,char *palabra, float posicion[2], color_t color){
	char *letra;
	float espacio[]={6,0}
	while((letra=getchar(palabra))!='\0'){
		polilinea=letra_a_polilinea(letra);
		dibujar_letra(renderer, letra,posicion+espacio,escala,color);
	}
}
void numero_a_polilinea(int numero,SDL_Renderer *renderer, float posicion[2], color_t color){
	char palabra[10];
	SDL_itoa(numero,palabra,10);//pasa el numero a palabra
	palabra_a_polilinea(renderer,palabra,posicion,direccion,color);
}


const size_t cantidad_filas(char caracter);
float **polilinea_caracter(char caracter);
void dibujar_letra(SDL_Renderer *renderer,char caracter, float posicion[2], color_t color);
void palabra_a_polilinea(SDL_Renderer *renderer,char *palabra, float posicion[2], color_t color);
void numero_a_polilinea(int numero,SDL_Renderer *renderer, float posicion[2], color_t color);

bool dibujar_planeta_infinito(SDL_Renderer *renderer,figura_t *figura,char *nombre, float posicion[2], float escala, float x_max, float x_min){
    
    size_t cant_poli=cantidad_poli_fig(figura);
    
    for(size_t i=0;i<cant_poli;i++){
        polilinea_t *polilinea_original=polilineas[i];
        polilinea_t *prepolilinea=polilinea_clonar(polilinea_original);
        polilinea_t *postpolilinea=polilinea_clonar(polilinea_original);
        if(dibujar_polilinea(renderer, polilinea_original, posicion, escala)==false) return false;
        if(dibujar_polilinea(renderer, prepolilinea, posicion+x_max, escala)==false) return false;
        if(dibujar_polilinea(renderer, postpolilinea, posicion+x_min, escala)==false) return false;
    }
    return true;
}

char combustible[20]="combustible";
char puntaje[20]="puntaje";

void dibujar_letra(SDL_Renderer *renderer,char caracter, float posicion[2], color_t color){
    size_t cant_punt=cantidad_filas(caracter);
    float matriz[largo_caracter][2];
    letra_matriz(matriz);
    float escala=1;

    SDL_SetRenderDrawColor(renderer, r, g, b, 0x00);   
    for(size_t j=0;j<cant_punt-1;j++){
        SDL_RenderDrawLine(
            renderer,   
            (matriz[j][0]*escala+posicion[0]),
            -(matriz[j][1]*escala+posicion[1]) + VENTANA_ALTO,
            (matriz[j+1][0]*escala+posicion[0]) ,
            -(matriz[j+1][1]*escala+posicion[1]) + VENTANA_ALTO
            );
    }
}

void palabra_a_polilinea(SDL_Renderer *renderer,char *palabra, float posicion[2], color_t color){
	char *letra;
	float espacio[]={6,0}
	while((letra=getchar(palabra))!='\0'){
		polilinea=letra_a_polilinea(letra);
		dibujar_letra(renderer, letra,posicion+espacio,escala,color);
	}
}

void numero_a_polilinea(int numero,SDL_Renderer *renderer, float posicion[2], color_t color){
	char palabra[10];
	SDL_itoa(numero,palabra,10);//pasa el numero a palabra
	palabra_a_polilinea(renderer,palabra,posicion,direccion,color);
}

---------------------------------------------
6/8

dibujar_nivel() tiene un figura_t * en vez de **
en game agregar un tipo de dato que contenga los puntos y las vidas, pueden estar en nave
-----------------------------------------------------
5/8

TDA nivel
TDA destructible
TDA bala
TDA pantalla (falta .h)

--------------------------------------------------
4/8
mover camara:
si no es infinito solo escalamos.

camara: polilinea fragmento del nivel entero.

si el nivel es infinito:
colocar polilinea:
tomar la polilinea, multiplicarla por 3, sumarle la mitad del alto
Escalar:
medir extremos en y, medir extremos en x,
que quede la pantalla con el minimo de la polilinea en el piso y el maximo auna distancia del amrgensuperior

establecer un cuadrado.
a medida que hay movimiento chequea si golpea contra el margen
si golpea contra el margen se mueve
si el movimiento es mayor a ancho de la polilinea


------------------
figura_t **memoria=crear_figuras(f);
figura_t **figuras_icono=cargar_tipo(memoria,ICONO);
figura_t **figuras_nivel=cargar_tipo(memoria,NIVEL);
figura_t **figuras_sprite=cargar_tipo(memoria,SPRITE);
figura_t **figura_planeta=cargar_tipo(memoria,PLANETA);
figura_t **figura_base=cargar_tipo(memoria,BASE);
figura_t **figura_combustible=cargar_tipo(memoria,COMBUSTIBLE);
figura_t **figura_torreta=cargar_tipo(memoria,TORRETA);
figura_t **figura_reactor=cargar_tipo(memoria,REACTOR);

...

define MAX_TIPOS 8

figura_t **memoria=crear_figuras(f);
figura_t ***lista_figuras=malloc(sizeof(lista_figuras **)*8);
for(size_t i=0;i<MAX_TIPOS;i++){
lista_figuras[i]=cargar_tipo(i);
}


//Borrador
iniciar juego
    cargar todo a memoria;
    cargar tipo niveles (copia);
    cargar tipo planeta (copia);

dibujar_inicio
    dibujar base;
    dibujar estrella;
    dibujar planeta;

iteraciones:
    tecla
    nave: direccion,aceleracion, velocidad, posicion, combustible,
    colision contra:
        paredes: cambia direccion velociddad colision
        sol: pierde una vida, vuelve a base
        planeta: carga planeta contra el que choco

planeta:
    carga elementos
    dibuja
    acomoda camara
    empieza iteraciones

    iteraciones planeta:
    tecla
    nave: aceleracion, velocidad, posicion, direccion, combustible,
    torreta: cantidad y cuales siguen.
    tanque: cantidad y cuales siguen.
    reactor: si sigue estando.
    colisiones:
        Escudo:
            tanque: recarga combustible
        Nave:
            borde pantalla:
                tipo no infinito:
                    cualquier borde:
                        funcion_cambiar nivel: chequear si terminó el nivel e ir a pantalla principal
                tipo infinito:
                    borde superior:
                        acomodar pantalla (hasta cota maxima);
                        cota maxima: funcion cambiar nivel
                    borde lateral:
                        acomodar pantalla
            polilinea planeta:
                pierde una vida y regresa a la posicion inicial si tiene vidas todavia;
                la funcion perder vida debe chequear que tenga vidas todavia
             disparo:
                pierde una vida y regresa a la posicion inicial si tiene vidas todavia;
                la funcion perder vida debe chequear que tenga vidas todavia
        Torreta: disparo;
        Reactor: disparo;


//Dibujo de polilineas

bool dibujar_polilineas(char *nombre,size_t escalado,float posicion[2]){
    figura_t *dibujo=cargar(nombre);//llamarlo por nombre o por figura?
    size_t cant_poli=figura->cantidad_polilineas;
    for(size_t i=0,i<cant_poli,i++){
        polilinea_t *poli_dibu=figura->polilineas[i];
        size_t cant_punt=polilinea_cantidad_puntos(poli_dibu);
        float matriz[2][cant_punt];//revisar que esto sea legal
        for(size_t j=0,j<cant_punt,j++){
            //if(lodeabajo==0) return NULL;
            polilinea_obtener_punto(poli_dibu,j,matriz[0][i],matriz[1][i]);// asi es la firma -> float *x, float *y
        }
        //existe polilinea_setear_color(polilinea_t *polilinea, color_t color)
        //pero no le encuentro mucho sentido...
        uint8_t r, g, b;
        color_a_rgb(poli_dibu->color, &r, &g, &b); //en funciones.h habría que hacer #include "color.h"
        SDL_SetRenderDrawColor(renderer, 0xFF, r, g, b);
        //arreglar matriz[][] de las cosas de abajo
        SDL_RenderDrawLine(render,(matriz[i][0]+posicion[0])*escalado,-(matriz[i][1]+posicion[1])*escalado,(matriz[i+1][0]+posicion[0])*escalado,-(matriz[i+1][1]+posicion[1])*escalado);
    }
    return true;
}

//


//esta es la estructura propuesta del main
SDL_SetRenderDrawColor(renderer, 0xFF, 0x00, 0x00, 0x00);
            for(int i = 0; i < chorro_tam - 1; i++)
                SDL_RenderDrawLine(
                    renderer,
                    chorro[i][0] * f + VENTANA_ANCHO / 2,
                    -chorro[i][1] * f + VENTANA_ALTO / 2,
                    chorro[i+1][0] * f + VENTANA_ANCHO / 2,
                    -chorro[i+1][1] * f + VENTANA_ALTO / 2
                );
        }


struct memoria_niveles;
typedef struct memoria_niveles mem_niv_t;

mem_niv_t crear_memoria_nivel(figura_t **memoria){

}

struct memoria_niveles{
    nivel_t **niveles;
    size_t cantidad;
}


struct nivel;
typedef struc nivel nivel_t;

typedef struct{
bool infinito;
polilinea_t **polilinea;
tanque_t *tanque;
torreta_t *torreta;
reactor_t *reactor;
}nivel_t

nivel_t crear_nivel()

struct tanque;
typedef struct_tanque tanque_t;
struct torreta;
typedef struct_torreta torreta_t;
struct reactor;
typedef struct_reactor reactor_t;

typedef struct{
bool infinito;
polilinea_t **polilinea;
float *posicion[2] //se pueden poner los 3 en parametros disttintos, o los 3 en el mismo
float *angulo;
size_t cantidad;
}tanque_t

typedef struct{
bool infinito;
polilinea_t **polilinea;
float *posicion[2] //se pueden poner los 3 en parametros disttintos, o los 3 en el mismo
float *angulo;
size_t cantidad;
}torreta_t

typedef struct{
bool infinito;
polilinea_t **polilinea;
float *posicion[2] //se pueden poner los 3 en parametros disttintos, o los 3 en el mismo
float *angulo;
size_t cantidad;
}reactor_t

tanque_t crear_tanques(nivel_t nivel){
    pedir cantidad
    pedir memoria
    setear
    setarposicion
}




nivel(nivel_t,nave_t)

matriz tanque x,y,tita
matriz torreta x,y,tita
matriz reactor x,y,tita

cargar nave
cargar superficie
cargar generico(posicion, angulo, cantidad)
generico=tanques, torretas o reactor

tda tanque
posicion
angulo
polilinea
cantidad